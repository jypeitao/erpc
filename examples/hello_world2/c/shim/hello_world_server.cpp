/*
 * Generated by erpcgen 1.13.0 on Fri Feb 14 14:15:26 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "hello_world_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11300 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



TextService_service::TextService_service(TextService_interface *_TextService_interface)
    : erpc::Service(TextService_interface::m_serviceId)
    , m_handler(_TextService_interface)
{
}

TextService_service::~TextService_service()
{
}

// return service interface handler.
TextService_interface* TextService_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t TextService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case TextService_interface::m_printTextId:
        {
            erpcStatus = printText_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case TextService_interface::m_stopServerId:
        {
            erpcStatus = stopServer_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for printText of TextService interface.
erpc_status_t TextService_service::printText_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    char * text = NULL;
    bool result;

    // startReadMessage() was already called before this shim was invoked.

    {
        uint32_t text_len;
        char * text_local;
        codec->readString(text_len, &text_local);
        text = (char*) erpc_malloc((text_len + 1) * sizeof(char));
        if ((text == NULL) || (text_local == NULL))
        {
            codec->updateStatus(kErpcStatus_MemoryError);
        }
        else
        {
            memcpy(text, text_local, text_len);
            (text)[text_len] = 0;
        }
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->printText(text);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, TextService_interface::m_serviceId, TextService_interface::m_printTextId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    erpc_free(text);

    return err;
}

// Server shim for stopServer of TextService interface.
erpc_status_t TextService_service::stopServer_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    // startReadMessage() was already called before this shim was invoked.

    // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = true;
#endif
    m_handler->stopServer();
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = false;
#endif
    return codec->getStatus();
}
