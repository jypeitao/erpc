/*
 * Generated by erpcgen 1.13.0 on Fri Feb 14 14:15:26 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_hello_world_server.h"
#include "hello_world_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class TextService_server: public TextService_interface
{
    public:
        virtual ~TextService_server() {};


        bool printText(const char * text)
        {
            bool result;
            result = ::printText(text);

            return result;
        }

        void stopServer(void)
        {
            ::stopServer();
        }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(TextService_service, s_TextService_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(TextService_server, s_TextService_server);

erpc_service_t create_TextService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) TextService_service(new (nothrow)TextService_server());
#else
    if (s_TextService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_TextService_server.construct();
        s_TextService_service.construct(s_TextService_server.get());
        service = s_TextService_service.get();
    }
#endif

    return service;
}

void destroy_TextService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (TextService_server *)(((TextService_service *)service)->getHandler());
        delete (TextService_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_TextService_service.get());
    s_TextService_service.destroy();
    s_TextService_server.destroy();
#endif
}

