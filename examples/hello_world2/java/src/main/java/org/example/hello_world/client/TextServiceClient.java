/** 
 * Generated by erpcgen 1.13.0 on Fri Feb 14 13:57:33 2025.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
 
package org.example.hello_world.client;

import org.example.hello_world.interfaces.ITextService;




import io.github.embeddedrpc.erpc.auxiliary.MessageType;
import io.github.embeddedrpc.erpc.auxiliary.MessageInfo;
import io.github.embeddedrpc.erpc.auxiliary.RequestContext;
import io.github.embeddedrpc.erpc.auxiliary.Reference;
import io.github.embeddedrpc.erpc.auxiliary.Utils;
import io.github.embeddedrpc.erpc.client.ClientManager;
import io.github.embeddedrpc.erpc.codec.Codec;

import java.util.ArrayList;
import java.util.List;

public class TextServiceClient implements ITextService {
    private final ClientManager clientManager;

    public TextServiceClient(ClientManager clientManager) {
        this.clientManager = clientManager;
    }


    @Override
    public boolean printText(String text) {
        // Create request
        RequestContext request = clientManager.createRequest(false);
        Codec codec = request.codec();

        // Write message info
        codec.startWriteMessage(new MessageInfo(
                MessageType.kInvocationMessage,
                this.SERVICE_ID,
                this.PRINTTEXT_ID,
                request.sequence()));

        // Write message data
        Utils.checkNotNull(text, "text is null");
        
        codec.writeString(text);

        // Perform request
        clientManager.performRequest(request);

        // Read out parameters

        // Read return value
        boolean _result = codec.readBool();
        return _result;
    }

    @Override
    public void stopServer() {
        // Create request
        RequestContext request = clientManager.createRequest(true);
        Codec codec = request.codec();

        // Write message info
        codec.startWriteMessage(new MessageInfo(
                MessageType.kOnewayMessage,
                this.SERVICE_ID,
                this.STOPSERVER_ID,
                request.sequence()));

        // Write message data

        // Perform request
        clientManager.performRequest(request);

    }
}
